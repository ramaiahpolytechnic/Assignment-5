# -*- coding: utf-8 -*-
"""Assig 5 (data preprocessing crop yield).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GYuj2ePKmQ8LZoFvMwSMQ0iNNeux-jJ

**Importing all the required libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import ConfusionMatrixDisplay

"""**Importing the dataset and creating the dataframe**"""

data = pd.read_csv("/content/drive/MyDrive/Assignment aiml/crop_yield.csv")
df = pd.DataFrame(data)
df.head()

"""**Finding if there is any missing values**"""

df.isna().sum()

"""**Finding the information about the dataset**"""

df.info()

"""**Dropping crop_year, season and state column since we are building classification model which predicts the crop name**

**using Area, Production, Annual_Rainfall, Fertilizer, Pesticide & Yield columns**
"""

df.drop(['Crop_Year','Season','State'], axis=1, inplace=True)
df.head()

"""**Statistical description of the dataset**"""

df.describe()

"""**Finding correlation between the variables**"""

df.iloc[:,1:7].corr()

"""**Finding unique values in the crop column**"""

df['Crop'].unique()

"""**Finding th count of each unique vlaue in the crop column**"""

df['Crop'].value_counts()

"""**Scaling the Numerial values column using Standarad Scaler**"""

scaler = StandardScaler()
df.iloc[:,1:7] = scaler.fit_transform(df.iloc[:,1:7])
df.head()

"""**converting Categoriacl values into numeriacal values using Label Encoder**"""

encoder = LabelEncoder()
df['Crop'] = encoder.fit_transform(df['Crop'])
df.head()

"""**Feature Selection**"""

x = df.iloc[:,1:7]
y = df.iloc[:,0]

"""**Splitting the dataset into train and test**"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state = 3)

"""**Fitting decision trre model**"""

model = DecisionTreeClassifier()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

accuracy = accuracy_score(y_test,y_pred)
accuracy

matrix = confusion_matrix(y_test,y_pred)
matrix

plt.figure(figsize=(50,45))
garph = ConfusionMatrixDisplay(matrix)

garph.plot()
plt.show()

report = classification_report(y_test,y_pred)
print(report)

